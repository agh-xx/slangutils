#!/usr/bin/env slsh

require ("cmdopt");
require ("dir");

variable
  Cat_Version = "0.1.0",
  Slsh_Path  = strtrim_end (path_concat (getcwd(), path_dirname (__argv[0])), "/.");

set_slang_load_path (path_concat (Slsh_Path, "../share/slsh"));

()= evalfile ("message");
  
private define cat_usage ()
{
  variable Opts =
    [
      sprintf ("Usage: %s [option] file1...file2\n", path_basename (__argv[0])),
      "Options:\n",
      " --version               Show version\n",
      " -h, --help              Show this message\n"
    ];

  print_usage (Opts);
  exit (0);
}

private define cat_version ()
{
  print_version (Cat_Version);
  exit (0);
}

define cat_stdin ()
{
  variable buf;

  while (-1 != fgets (&buf, stdin))
    ()= fputs (buf, stdout);
}

define slsh_main ()
{
  variable c = cmdopt_new ();
  c.add("h|help", &cat_usage);
  c.add("version", &cat_version);
  variable i = c.process (__argv, 1);

  if (1 ==__argc)
    {
      cat_stdin ();
      exit (0);
    }
  
  variable file, buf, fp, exit_code = 0;
  foreach file (__argv[[i:]])
    {
      if (__is_same (file, "-"))
        {
          cat_stdin ();
          continue;
        }

      if (__is_directory (file))
        {
          if (__is_same (file, __argv[i]))
            ()= fprintf (stderr, "%s: error reading `%s': Is a directory\n",
                path_basename (__argv[0]), file);
          else
            ()= fprintf (stderr, "\n%s: error reading `%s': Is a directory\n",
                path_basename (__argv[0]), file);

          exit_code = 1;
          continue;
        }

      variable st = stat_file (file);
      if (NULL == st)
        {
          if (__is_same (file, __argv[i]))
            ()= fprintf (stderr, "%s: cannot open `%s' for reading: %s\n",
                path_basename (__argv[0]), file, errno_string (errno));
          else
            ()= fprintf (stderr, "\n%s: cannot open `%s' for reading: %s\n",
                path_basename (__argv[0]), file, errno_string (errno));
        }

      fp = fopen (file, "r");
      if (NULL == fp)
        {
          exit_code = 1;
          continue;
        }

      while (-1 != fgets (&buf, fp))
        ()= fputs (buf, stdout);
    }

  exit (exit_code);
}
