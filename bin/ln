#!/usr/bin/env slsh

require ("cmdopt");

variable
  Ln_Version = "0.1.2",
  Ln_Interactive = 0,
  Ln_Verbose = 0,
  Ln_Force = 0,
  Ln_Backup = 0,
  Ln_Suffix = "~",
  Ln_Symlink = 0,
  Cp_Interactive = 0,
  Cp_Verbose = 0,
  Cp_Force = 0,
  Cp_Noclobber = 0,
  Cp_Backup = 0,
  Cp_Suffix = "~",
  Cp_Update = 0,
  Cp_Recursive = 0,
  file_list = {},
  Slsh_Path  = strtrim_end (path_concat (getcwd(), path_dirname (__argv[0])), "/.");

set_slang_load_path (path_concat (Slsh_Path, "../share/slsh"));

()= evalfile ("message");
()= evalfile ("file");
()= evalfile ("dir");
()= evalfile ("stats");
()= evalfile ("recursive");
()= evalfile ("copy");

private define ln_usage ()
{
  variable Opts =
    [
      sprintf ("Usage: %s [options] source target\n", path_basename (__argv[0])),
      "Options:\n",
      " -i, --interactive       Prompt before overwrite\n",
      " -f, --force             Do not prompt before overwriting \n",
      " -v, --verbose           Be verbose  \n",
      " -b                      Make a backup of each existing destination file\n",
      " -s                      Make symbolic links instead of hard links\n",
      " -S, --suffix=SUFFIX     Override the default backup suffix ~\n",
      " --version               Show version\n",
      " -h, --help              Show this message\n",
    ];
  print_usage (Opts);
  exit (0);
}

private define ln_version ()
{
  print_version (Ln_Version);
  exit (0);
}

private define ln_hardlink (source, dest)
{
  if (-1 == hardlink (source, dest))
    {
      ()= fprintf (stderr, "%s: creating symbolic link `%s':\n",
                   path_basename (__argv[0]), errno_string (errno));
      return -1;
    }

  return 0;
}

private define ln_symlink (source, dest)
{
  if (-1 == symlink (source, dest))
    {
      ()= fprintf (stderr, "%s: creating symbolic link `%s':\n",
                   path_basename (__argv[0]), errno_string (errno));
      return -1;
    }

   return 0;
}

private define ln_main (source, dest)
{
  variable st_source = stat_file (source),
           st_dest = stat_file (dest);

  % check if source exists first
  if (NULL == st_source)
   {
     ()= fprintf (stderr, "%s: accessing `%s': No such file or directory\n",
                  path_basename (__argv[0]), source);
     return -1;
   }

  if ((source == dest)
     || ((st_dest != NULL)
     && (st_source.st_ino == st_dest.st_ino)
     && (st_source.st_dev == st_dest.st_dev)))
    {
      ()= fprintf (stderr, "%s: `%s' and `%s' are the same file\n",
                   path_basename (__argv[0]), source, dest);
      return -1;
    }
  
  % if it a hardlink and source is a directory: abort
  if (0 == Ln_Symlink && 1 ==__is_directory(source))
    {
      ()= fprintf (stderr, "%s: `%s': hard link not allowed for directory\n",
                   path_basename (__argv[0]), dest);
      return -1;
    }

  % get the current dir and 'concat' it with the source because
  % slsh> mkdir ("test");
  %0
  %slsh> chdir ("test");
  %0
  %slsh> !touch a;      
  %slsh> symlink ("a", "b");
  %0
  %slsh> st = stat_file("b");
  %slsh> st;                 
  %Struct_Type with 12 fields
  %slsh> mkdir ("newdir"); 
  %0
  %slsh> symlink ("a", "newdir/c");
  %0
  %slsh> st = stat_file ("newdir/c");
  %slsh> st;                         
  %NULL
  % slsh> readlink ("newdir/c");                                                                                                   
  % a
  % symlink creates a dangling link if you don't call it with an absolute path
  ifnot (path_is_absolute (source))
    source = path_concat (getcwd (), source); 

  % if dest is an existing dir, the new dest = dest and the basename of source 
  if (NULL != st_dest && __is_directory(dest))
    {
      dest = path_concat (dest, path_basename (source));
      st_dest = stat_file (dest);
    }
  
  % if source exists and it is an existing dir, abort
  if (NULL !=  st_dest && __is_directory(dest))
    {
      ()= fprintf (stderr, "%s: `%s': cannot overwrite directory\n",
                   path_basename (__argv[0]), source);
      return -1;
    }
  
  % if source exists and if interactive mode, ask
  variable backuptext = "";
  if (NULL != st_dest)
    {
      if (Ln_Interactive)
        {
          if (1 != get_yn ("%s: replace `%s'? [y/n]",
                   path_basename (__argv[0]), dest))
            {
              ()= fputs ("Not Confirmed\n", stdout);
              return -1;
            }
         Ln_Force = 1;
        }
      % see if backup is set, and make the backup
      % return -1 if not succesfull
      % see also if force is set and make the backup in case
      % something will go wrong later, so we can recover the file
      if (Ln_Backup || Ln_Force)
        {
          variable backup = strcat (dest, Ln_Suffix);
          if (-1 == copy([dest], backup))
              {
                ()= remove (backup);
                return -1;
              }

          if (__is_file_executable (source))
            chmod (dest, 0755);

          if (Ln_Backup)
            backuptext = sprintf ("(backup: `%s')", backup);
        }

      if (Ln_Force)
        ()= remove (dest);
    }

  % See if we want to do a symbolic link ot hardlink
  % and call the appropriate function
  if (Ln_Symlink)
    {
      if (-1 == ln_symlink (source, dest))
        {
          if (Ln_Force)
            copy ([backup], dest);

          return -1;
        }
    }
  else
    {
      if (-1 == ln_hardlink (source, dest))
        {
          if (Ln_Force)
            copy ([backup], dest);

          return -1;
        }
    }
  
  if (Ln_Verbose)
    if (Ln_Symlink)
      ()= fprintf (stdout, "`%s' -> `%s' %s\n", source, dest, backuptext);
    else
      ()= fprintf (stdout, "`%s' => `%s' %s\n", source, dest, backuptext);
  
  if (Ln_Force)
    ifnot (Ln_Backup)
      ()= remove (backup);

  return 0;

}

define slsh_main ()
{
  variable c = cmdopt_new ();
  c.add("h|help", &ln_usage);
  c.add("version", &ln_version);
  c.add("i|interactive", &Ln_Interactive);
  c.add("f|force", &Ln_Force);
  c.add("v|verbose", &Ln_Verbose);
  c.add("b", &Ln_Backup);
  c.add("s", &Ln_Symlink);
  c.add("S|suffix", &Ln_Suffix; type="string");
  variable i = c.process (__argv, 1);

  if (i + 2 > __argc)
    ln_usage ();

  if (Ln_Interactive && Ln_Force)
    Ln_Interactive = 0;

  if (-1 == ln_main (__argv[i], __argv[i+1]))
    exit (1);

  exit (0);
}
